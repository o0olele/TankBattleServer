// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.1
// source: server.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConnectRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   uint32 `protobuf:"fixed32,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ConnectRoomInfo) Reset() {
	*x = ConnectRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRoomInfo) ProtoMessage() {}

func (x *ConnectRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRoomInfo.ProtoReflect.Descriptor instead.
func (*ConnectRoomInfo) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectRoomInfo) GetIp() uint32 {
	if x != nil {
		return x.Ip
	}
	return 0
}

func (x *ConnectRoomInfo) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type LogicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MInfo *ConnectRoomInfo `protobuf:"bytes,1,opt,name=mInfo,proto3" json:"mInfo,omitempty"`
}

func (x *LogicResponse) Reset() {
	*x = LogicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicResponse) ProtoMessage() {}

func (x *LogicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicResponse.ProtoReflect.Descriptor instead.
func (*LogicResponse) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *LogicResponse) GetMInfo() *ConnectRoomInfo {
	if x != nil {
		return x.MInfo
	}
	return nil
}

type LogicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *LogicRequest) Reset() {
	*x = LogicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicRequest) ProtoMessage() {}

func (x *LogicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicRequest.ProtoReflect.Descriptor instead.
func (*LogicRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

func (x *LogicRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x3d, 0x0a, 0x0d,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x24, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x32, 0x4e, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData = file_server_proto_rawDesc
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_rawDescData)
	})
	return file_server_proto_rawDescData
}

var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_server_proto_goTypes = []interface{}{
	(*ConnectRoomInfo)(nil), // 0: proto.ConnectRoomInfo
	(*LogicResponse)(nil),   // 1: proto.LogicResponse
	(*LogicRequest)(nil),    // 2: proto.LogicRequest
}
var file_server_proto_depIdxs = []int32{
	0, // 0: proto.LogicResponse.mInfo:type_name -> proto.ConnectRoomInfo
	2, // 1: proto.StreamLogicService.Route:input_type -> proto.LogicRequest
	1, // 2: proto.StreamLogicService.Route:output_type -> proto.LogicResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_rawDesc = nil
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamLogicServiceClient is the client API for StreamLogicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamLogicServiceClient interface {
	Route(ctx context.Context, opts ...grpc.CallOption) (StreamLogicService_RouteClient, error)
}

type streamLogicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamLogicServiceClient(cc grpc.ClientConnInterface) StreamLogicServiceClient {
	return &streamLogicServiceClient{cc}
}

func (c *streamLogicServiceClient) Route(ctx context.Context, opts ...grpc.CallOption) (StreamLogicService_RouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamLogicService_serviceDesc.Streams[0], "/proto.StreamLogicService/Route", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamLogicServiceRouteClient{stream}
	return x, nil
}

type StreamLogicService_RouteClient interface {
	Send(*LogicRequest) error
	Recv() (*LogicResponse, error)
	grpc.ClientStream
}

type streamLogicServiceRouteClient struct {
	grpc.ClientStream
}

func (x *streamLogicServiceRouteClient) Send(m *LogicRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamLogicServiceRouteClient) Recv() (*LogicResponse, error) {
	m := new(LogicResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamLogicServiceServer is the server API for StreamLogicService service.
type StreamLogicServiceServer interface {
	Route(StreamLogicService_RouteServer) error
}

// UnimplementedStreamLogicServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamLogicServiceServer struct {
}

func (*UnimplementedStreamLogicServiceServer) Route(StreamLogicService_RouteServer) error {
	return status.Errorf(codes.Unimplemented, "method Route not implemented")
}

func RegisterStreamLogicServiceServer(s *grpc.Server, srv StreamLogicServiceServer) {
	s.RegisterService(&_StreamLogicService_serviceDesc, srv)
}

func _StreamLogicService_Route_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamLogicServiceServer).Route(&streamLogicServiceRouteServer{stream})
}

type StreamLogicService_RouteServer interface {
	Send(*LogicResponse) error
	Recv() (*LogicRequest, error)
	grpc.ServerStream
}

type streamLogicServiceRouteServer struct {
	grpc.ServerStream
}

func (x *streamLogicServiceRouteServer) Send(m *LogicResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamLogicServiceRouteServer) Recv() (*LogicRequest, error) {
	m := new(LogicRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamLogicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StreamLogicService",
	HandlerType: (*StreamLogicServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Route",
			Handler:       _StreamLogicService_Route_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
